const solution = (input) => {
  const [[, D], ...tmp] = input
    .split("\n")
    .map((v) => v.split(" ").map(Number));

  const dist = Array(D + 1).fill(Infinity);
  const shortcuts = Array.from({ length: D + 1 }, () => []);
  for (const t of tmp) {
    const [s, e, d] = t;
    if (e > D) continue;
    if (e - s <= d) continue;
    shortcuts[s].push([e, d]);
  }
  for (let i = 0; i < D; i++) {
    shortcuts[i].push([i + 1, 1]);
  }

  const heap = new Heap((a, b) => a[1] < b[1]);
  dist[0] = 0;
  heap.push([0, 0]);

  while (!heap.empty()) {
    const [cur, cost] = heap.pop();
    if (dist[cur] < cost) continue;

    for (const [next, nextCost] of shortcuts[cur]) {
      if (dist[next] > dist[cur] + nextCost) {
        dist[next] = dist[cur] + nextCost;
        heap.push([next, dist[next]]);
      }
    }
  }

  return dist[D];
};

class Heap {
  constructor(compare) {
    this.heap = [null];
    this.compare = compare;
  }

  size() {
    return this.heap.length - 1;
  }

  empty() {
    return this.size() === 0;
  }

  top() {
    if (this.empty()) return undefined;
    return this.heap[1];
  }

  swap(a, b) {
    [this.heap[a], this.heap[b]] = [this.heap[b], this.heap[a]];
  }

  push(item) {
    this.heap.push(item);
    let index = this.size();
    let parent = Math.floor(index / 2);
    while (index > 1 && this.compare(this.heap[index], this.heap[parent])) {
      this.swap(index, parent);
      index = parent;
      parent = Math.floor(index / 2);
    }
  }

  pop() {
    if (this.empty()) return undefined;
    if (this.size() === 1) return this.heap.pop();

    const item = this.top();
    this.heap[1] = this.heap.pop();
    let index = 1;
    let left = index * 2;
    let right = index * 2 + 1;
    while (left <= this.size()) {
      let target = index;
      if (this.compare(this.heap[left], this.heap[target])) {
        target = left;
      }
      if (
        right <= this.size() &&
        this.compare(this.heap[right], this.heap[target])
      ) {
        target = right;
      }
      if (target === index) break;
      this.swap(index, target);
      index = target;
      left = index * 2;
      right = index * 2 + 1;
    }

    return item;
  }
}

const inputPath =
  process.platform === "linux" ? "/dev/stdin" : __dirname + "/input.txt";
const input = require("fs").readFileSync(inputPath, "utf-8").toString().trim();

console.log(solution(input));
